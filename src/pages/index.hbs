<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}}</title>
    <link rel="stylesheet" href="/style.css">
    
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 32 32%22><rect width=%2232%22 height=%2232%22 rx=%228%22 fill=%22%233b82f6%22/><circle cx=%2216%22 cy=%2216%22 r=%228%22 fill=%22none%22 stroke=%22white%22 stroke-width=%222%22/><path d=%22M16 12v4l3 2%22 stroke=%22white%22 stroke-width=%222%22 stroke-linecap=%22round%22/></svg>">
    
    <!-- Meta Tags -->
    <meta name="description" content="多人協作的實時倒計時工具，支援座標輸入和台灣時間顯示">
    <meta name="keywords" content="倒計時,計時器,多人協作,實時同步,台灣時間">
    <meta name="author" content="Countdown Timer App">
</head>
<body>
    <!-- User Name Modal -->
    <div id="user-modal" class="modal-overlay">
        <div class="modal">
            <h3>👋 歡迎使用倒計時工具</h3>
            <p>請輸入你的名字，其他用戶將會看到</p>
            <input type="text" id="user-name-input" class="form-input" placeholder="輸入你的名字" maxlength="20">
            <button id="confirm-name" class="btn-primary">確認</button>
            <button id="random-name" class="random-name-btn">🎲 隨機生成名字</button>
        </div>
    </div>

    <div class="container">
        <!-- Header -->
        <header class="header">
            <h1>⏰ 多人協作倒計時工具</h1>
            <p>輸入座標和時間，即時同步倒計時管理</p>
        </header>

        <!-- Main Content -->
        <div class="content">
            <!-- Input Panel -->
            <div class="input-panel">
                <!-- Current User Info -->
                <div class="user-info">
                    <div class="user-color-dot" id="current-user-color"></div>
                    <span>當前用戶：</span>
                    <strong id="current-user-name">載入中...</strong>
                </div>

                <div class="form-section">
                    <h3>🎯 新增倒計時</h3>
                    <form id="countdown-form">
                        <div class="form-grid">
                            <div class="form-group">
                                <label for="coord-x">X 座標</label>
                                <input type="number" id="coord-x" class="form-input" min="0" max="9999" placeholder="0" required>
                            </div>
                            <div class="form-group">
                                <label for="coord-y">Y 座標</label>
                                <input type="number" id="coord-y" class="form-input" min="0" max="9999" placeholder="0" required>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label>倒計時間</label>
                            <div class="time-inputs">
                                <input type="number" id="time-minutes" class="form-input" min="0" max="59" placeholder="分鐘" required>
                                <span class="time-separator">:</span>
                                <input type="number" id="time-seconds" class="form-input" min="0" max="59" placeholder="秒鐘" required>
                            </div>
                        </div>
                        
                        <button type="submit" class="btn-primary">
                            ➕ 開始倒計時
                        </button>
                    </form>
                    
                    <div id="error-message" class="error-message"></div>
                </div>

                <div class="form-section">
                    <h3>🔧 管理工具</h3>
                    <button id="clear-all-btn" class="btn-danger" style="width: 100%;">
                        🗑️ 清空所有倒計時
                    </button>
                    <button id="sync-btn" class="random-name-btn" style="width: 100%; margin-top: 8px;">
                        🔄 手動同步
                    </button>
                </div>
            </div>

            <!-- Status Panel -->
            <div class="status-panel">
                <div class="status-header">
                    <h3>📊 倒計時列表</h3>
                    <div class="connection-status">
                        <div class="status-indicator" id="connection-indicator"></div>
                        <span id="connection-text">載入中...</span>
                    </div>
                </div>
                
                <div class="countdown-list" id="countdown-list">
                    <div class="empty-state">
                        <div class="empty-state-icon">⏳</div>
                        <p>正在連接服務器...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript -->
    <script>
        // 🔧 最簡化的前端連接邏輯
        console.log('🎯 開始初始化...');

        // 檢查 Socket.IO
        if (typeof io === 'undefined') {
            console.log('📦 加載 Socket.IO...');
            const script = document.createElement('script');
            script.src = '/socket.io/socket.io.js';
            script.onload = () => {
                console.log('✅ Socket.IO 加載完成');
                startApp();
            };
            script.onerror = () => {
                console.error('❌ Socket.IO 加載失敗');
                showError('無法加載必要組件，請刷新頁面');
            };
            document.head.appendChild(script);
        } else {
            console.log('✅ Socket.IO 已存在');
            startApp();
        }

        function startApp() {
            console.log('🚀 啟動應用...');
            
            // 簡化的應用類
            class SimpleCountdownApp {
                constructor() {
                    this.countdowns = [];
                    this.currentUser = null;
                    this.isConnected = false;
                    
                    this.showUserModal();
                }
                
                showUserModal() {
                    const modal = document.getElementById('user-modal');
                    const nameInput = document.getElementById('user-name-input');
                    const confirmBtn = document.getElementById('confirm-name');
                    const randomBtn = document.getElementById('random-name');
                    
                    // 隨機名字
                    randomBtn.onclick = () => {
                        const adjectives = ['勤奮的', '聰明的', '快速的', '準確的', '專注的', '創新的', '積極的', '高效的', '友善的', '樂觀的'];
                        const nouns = ['戰士', '工程師', '設計師', '分析師', '專家', '管理者', '開發者', '策略家', '創作者', '探索者'];
                        const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];
                        const noun = nouns[Math.floor(Math.random() * nouns.length)];
                        const number = Math.floor(Math.random() * 99) + 1;
                        nameInput.value = `${adjective}${noun}${number}`;
                    };
                    
                    // 確認按鈕
                    confirmBtn.onclick = () => {
                        const name = nameInput.value.trim();
                        if (name.length >= 2) {
                            this.setUser(name);
                            modal.style.display = 'none';
                            this.initSocket();
                        } else {
                            alert('名字至少需要2個字符');
                        }
                    };
                    
                    // Enter 鍵
                    nameInput.onkeypress = (e) => {
                        if (e.key === 'Enter') confirmBtn.click();
                    };
                    
                    nameInput.focus();
                }
                
                setUser(name) {
                    const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#06b6d4', '#84cc16', '#f97316', '#ec4899', '#6366f1', '#14b8a6', '#fbbf24'];
                    this.currentUser = {
                        name: name,
                        color: colors[Math.floor(Math.random() * colors.length)]
                    };
                    
                    document.getElementById('current-user-name').textContent = name;
                    document.getElementById('current-user-color').style.backgroundColor = this.currentUser.color;
                    
                    console.log(`👤 用戶設置: ${name}`);
                }
                
                initSocket() {
                    console.log('🔌 初始化 Socket 連接...');
                    
                    // 🎯 最簡單的 Socket.IO 配置
                    this.socket = io({
                        transports: ['polling', 'websocket'], // polling 優先，更穩定
                        upgrade: true,
                        timeout: 20000,
                        forceNew: true // 強制新連接，避免緩存問題
                    });
                    
                    this.setupEvents();
                }
                
                setupEvents() {
                    // 連接事件
                    this.socket.on('connect', () => {
                        this.isConnected = true;
                        this.updateStatus('🟢 已連線');
                        console.log('✅ Socket 連接成功');
                        
                        // 發送用戶信息
                        this.socket.emit('set-user-info', this.currentUser);
                    });
                    
                    this.socket.on('disconnect', () => {
                        this.isConnected = false;
                        this.updateStatus('🔴 連線中斷');
                        console.log('❌ Socket 連接斷開');
                    });
                    
                    this.socket.on('connect_error', (error) => {
                        this.isConnected = false;
                        this.updateStatus('🔴 連接錯誤');
                        console.error('🔌 連接錯誤:', error);
                        this.showError('連接服務器失敗，請檢查網絡或刷新頁面');
                    });
                    
                    // 歡迎消息
                    this.socket.on('welcome', (data) => {
                        console.log('🎉 收到歡迎消息:', data.message);
                        this.showMessage('🎉 連接成功！');
                    });
                    
                    // 倒計時事件
                    this.socket.on('countdown-list', (countdowns) => {
                        console.log(`📋 收到倒計時列表: ${countdowns.length} 個`);
                        this.countdowns = countdowns;
                        this.render();
                    });
                    
                    this.socket.on('countdown-added', (countdown) => {
                        if (!this.countdowns.find(c => c.id === countdown.id)) {
                            this.countdowns.push(countdown);
                            this.render();
                            console.log(`➕ 新增: (${countdown.x},${countdown.y})`);
                        }
                    });
                    
                    this.socket.on('countdown-removed', (data) => {
                        this.countdowns = this.countdowns.filter(c => c.id !== data.id);
                        this.render();
                        console.log(`🗑️ 移除: ID ${data.id}`);
                    });
                    
                    this.socket.on('countdowns-cleared', () => {
                        this.countdowns = [];
                        this.render();
                        console.log('🧹 清空所有');
                    });
                    
                    this.socket.on('error', (data) => {
                        this.showError(data.message);
                        if (data.duplicateId) {
                            this.highlight(data.duplicateId);
                        }
                    });
                    
                    this.setupUI();
                }
                
                setupUI() {
                    // 表單提交
                    document.getElementById('countdown-form').onsubmit = (e) => {
                        e.preventDefault();
                        this.addCountdown();
                    };
                    
                    // 清空按鈕
                    document.getElementById('clear-all-btn').onclick = () => {
                        if (confirm('確定清空所有倒計時？')) {
                            if (this.isConnected) {
                                this.socket.emit('clear-all');
                            } else {
                                this.showError('未連接到服務器');
                            }
                        }
                    };
                    
                    // 同步按鈕
                    document.getElementById('sync-btn').onclick = () => {
                        if (this.isConnected) {
                            this.socket.emit('request-sync');
                            this.showMessage('🔄 正在同步...');
                        } else {
                            this.showError('未連接到服務器');
                        }
                    };
                    
                    // 輸入驗證
                    const inputs = document.querySelectorAll('input[type="number"]');
                    inputs.forEach(input => {
                        input.oninput = () => {
                            this.hideError();
                            
                            // 時間格式化
                            if (input.id === 'time-seconds' || input.id === 'time-minutes') {
                                let value = parseInt(input.value);
                                if (value > 59) input.value = 59;
                                else if (value < 0) input.value = 0;
                            }
                            
                            // 座標限制
                            if (input.id === 'coord-x' || input.id === 'coord-y') {
                                let value = parseInt(input.value);
                                if (value > 9999) input.value = 9999;
                                else if (value < 0) input.value = 0;
                            }
                        };
                        
                        // Enter 鍵提交
                        input.onkeypress = (e) => {
                            if (e.key === 'Enter') {
                                e.preventDefault();
                                document.getElementById('countdown-form').dispatchEvent(new Event('submit'));
                            }
                        };
                    });
                    
                    // 座標重複檢查
                    const coordX = document.getElementById('coord-x');
                    const coordY = document.getElementById('coord-y');
                    
                    const checkCoords = () => {
                        const x = parseInt(coordX.value);
                        const y = parseInt(coordY.value);
                        
                        if (!isNaN(x) && !isNaN(y)) {
                            const existing = this.countdowns.find(c => c.x === x && c.y === y);
                            if (existing) {
                                coordX.style.borderColor = '#f59e0b';
                                coordY.style.borderColor = '#f59e0b';
                                coordX.style.backgroundColor = '#fffbeb';
                                coordY.style.backgroundColor = '#fffbeb';
                            } else {
                                coordX.style.borderColor = '';
                                coordY.style.borderColor = '';
                                coordX.style.backgroundColor = '';
                                coordY.style.backgroundColor = '';
                            }
                        }
                    };
                    
                    coordX.oninput = checkCoords;
                    coordY.oninput = checkCoords;
                    
                    // 開始更新倒計時
                    setInterval(() => {
                        this.updateTimers();
                    }, 1000);
                }
                
                addCountdown() {
                    if (!this.isConnected) {
                        this.showError('未連接到服務器');
                        return;
                    }
                    
                    const x = parseInt(document.getElementById('coord-x').value);
                    const y = parseInt(document.getElementById('coord-y').value);
                    const minutes = parseInt(document.getElementById('time-minutes').value) || 0;
                    const seconds = parseInt(document.getElementById('time-seconds').value) || 0;
                    
                    // 簡單驗證
                    if (isNaN(x) || isNaN(y) || x < 0 || y < 0) {
                        this.showError('請輸入有效座標 (0-9999)');
                        return;
                    }
                    
                    if (minutes < 0 || seconds < 0 || minutes > 59 || seconds > 59) {
                        this.showError('請輸入有效時間 (0-59)');
                        return;
                    }
                    
                    if (minutes === 0 && seconds === 0) {
                        this.showError('時間不能為0');
                        return;
                    }
                    
                    // 檢查重複座標
                    const existing = this.countdowns.find(c => c.x === x && c.y === y);
                    if (existing) {
                        const remaining = Math.max(0, existing.endTime - Date.now());
                        const timeStr = remaining > 0 ? this.formatTime(remaining) : '已結束';
                        this.showError(`座標 (${x}, ${y}) 已存在倒計時！\n創建者：${existing.createdBy}\n剩餘時間：${timeStr}`);
                        this.highlight(existing.id);
                        return;
                    }
                    
                    // 發送到服務器
                    this.socket.emit('add-countdown', {
                        x, y, minutes, seconds,
                        user: this.currentUser
                    });
                    
                    // 清空表單
                    document.getElementById('countdown-form').reset();
                    this.hideError();
                    console.log(`📤 添加倒計時: (${x},${y}) ${minutes}:${seconds}`);
                }
                
                render() {
                    const container = document.getElementById('countdown-list');
                    
                    if (this.countdowns.length === 0) {
                        container.innerHTML = `
                            <div class="empty-state">
                                <div class="empty-state-icon">⏳</div>
                                <p>尚無倒計時<br>開始添加吧！</p>
                            </div>
                        `;
                        return;
                    }
                    
                    // 排序：活躍的在前
                    const now = Date.now();
                    this.countdowns.sort((a, b) => {
                        const aRemaining = Math.max(0, a.endTime - now);
                        const bRemaining = Math.max(0, b.endTime - now);
                        
                        // 未過期的排在前面，按剩餘時間升序
                        if (aRemaining > 0 && bRemaining > 0) {
                            return aRemaining - bRemaining;
                        }
                        
                        // 過期的排在後面，按過期時間降序
                        if (aRemaining === 0 && bRemaining === 0) {
                            return b.endTime - a.endTime;
                        }
                        
                        // 未過期的在前
                        return bRemaining - aRemaining;
                    });
                    
                    container.innerHTML = this.countdowns.map(item => {
                        const remaining = Math.max(0, item.endTime - now);
                        const isExpired = remaining === 0;
                        const isWarning = remaining > 0 && remaining <= 60000;
                        const timeStr = isExpired ? '已結束' : this.formatTime(remaining);
                        const endTimeStr = new Date(item.endTime).toLocaleString('zh-TW', {
                            timeZone: 'Asia/Taipei',
                            month: '2-digit',
                            day: '2-digit',
                            hour: '2-digit',
                            minute: '2-digit',
                            second: '2-digit',
                            hour12: false
                        });
                        
                        const itemClass = isExpired ? 'expired' : (isWarning ? 'warning' : '');
                        const timerClass = isExpired ? 'expired' : (isWarning ? 'warning' : '');
                        
                        return `
                            <div class="countdown-item ${itemClass} fade-in" data-id="${item.id}">
                                <div class="countdown-header">
                                    <div class="countdown-coordinates">📍 (${item.x}, ${item.y})</div>
                                    <button class="remove-btn" onclick="app.removeCountdown(${item.id})" title="移除倒計時">×</button>
                                </div>
                                <div class="countdown-timer ${timerClass}">${timeStr}</div>
                                <div class="countdown-info">
                                    <div class="countdown-author">
                                        <span class="author-badge" style="background-color: ${item.createdByColor}"></span>
                                        ${item.createdBy}
                                    </div>
                                    <div class="countdown-endtime">🕐 ${endTimeStr}</div>
                                </div>
                            </div>
                        `;
                    }).join('');
                }
                
                removeCountdown(id) {
                    if (!this.isConnected) {
                        this.showError('未連接到服務器');
                        return;
                    }
                    
                    if (confirm('確定移除此倒計時？')) {
                        this.socket.emit('remove-countdown', { id });
                    }
                }
                
                updateTimers() {
                    if (this.countdowns.length === 0) return;
                    
                    const now = Date.now();
                    
                    this.countdowns.forEach(item => {
                        const element = document.querySelector(`[data-id="${item.id}"] .countdown-timer`);
                        if (element) {
                            const remaining = Math.max(0, item.endTime - now);
                            const isExpired = remaining === 0;
                            const isWarning = remaining > 0 && remaining <= 60000;
                            const timeStr = isExpired ? '已結束' : this.formatTime(remaining);
                            
                            element.textContent = timeStr;
                            element.className = `countdown-timer ${isExpired ? 'expired' : (isWarning ? 'warning' : '')}`;
                            
                            const itemElement = element.closest('.countdown-item');
                            if (itemElement) {
                                itemElement.className = `countdown-item ${isExpired ? 'expired' : (isWarning ? 'warning' : '')} fade-in`;
                            }
                        }
                    });
                }
                
                formatTime(ms) {
                    const totalSeconds = Math.floor(ms / 1000);
                    const minutes = Math.floor(totalSeconds / 60);
                    const seconds = totalSeconds % 60;
                    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                }
                
                highlight(id) {
                    const element = document.querySelector(`[data-id="${id}"]`);
                    if (element) {
                        element.classList.remove('highlight-duplicate');
                        element.offsetHeight; // 強制重排
                        element.classList.add('highlight-duplicate');
                        element.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        setTimeout(() => {
                            element.classList.remove('highlight-duplicate');
                        }, 3000);
                    }
                }
                
                updateStatus(text) {
                    document.getElementById('connection-text').textContent = text;
                    const indicator = document.getElementById('connection-indicator');
                    if (text.includes('已連線')) {
                        indicator.classList.remove('disconnected');
                    } else {
                        indicator.classList.add('disconnected');
                    }
                }
                
                showMessage(msg) {
                    const errorDiv = document.getElementById('error-message');
                    errorDiv.innerHTML = msg;
                    errorDiv.classList.add('show');
                    setTimeout(() => this.hideError(), 2000);
                }
                
                showError(msg) {
                    const errorDiv = document.getElementById('error-message');
                    const formattedMessage = msg.replace(/\n/g, '<br>');
                    errorDiv.innerHTML = `❌ ${formattedMessage}`;
                    errorDiv.classList.add('show');
                    setTimeout(() => this.hideError(), 7000);
                }
                
                hideError() {
                    const errorDiv = document.getElementById('error-message');
                    errorDiv.classList.remove('show');
                }
            }
            
            // 啟動應用
            window.app = new SimpleCountdownApp();
            console.log('✅ 應用啟動完成');
        }

        function showError(message) {
            document.getElementById('countdown-list').innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">❌</div>
                    <p>${message}</p>
                </div>
            `;
        }
    </script>
</body>
</html>